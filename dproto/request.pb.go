// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dproto/request.proto

package dproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskRequest struct {
	RequestID            string      `protobuf:"bytes,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Type                 PacketType  `protobuf:"varint,2,opt,name=Type,proto3,enum=dproto.PacketType" json:"Type,omitempty"`
	Profile              ProfileType `protobuf:"varint,3,opt,name=Profile,proto3,enum=dproto.ProfileType" json:"Profile,omitempty"`
	Proto                Protocol    `protobuf:"varint,4,opt,name=Proto,proto3,enum=dproto.Protocol" json:"Proto,omitempty"`
	Host                 string      `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Port                 int32       `protobuf:"varint,6,opt,name=Port,proto3" json:"Port,omitempty"`
	Login                string      `protobuf:"bytes,7,opt,name=Login,proto3" json:"Login,omitempty"`
	Password             string      `protobuf:"bytes,8,opt,name=Password,proto3" json:"Password,omitempty"`
	Enable               string      `protobuf:"bytes,9,opt,name=Enable,proto3" json:"Enable,omitempty"`
	Timeout              int32       `protobuf:"varint,10,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_337d7ec96a0ae35e, []int{0}
}
func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(dst, src)
}
func (m *TaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *TaskRequest) GetType() PacketType {
	if m != nil {
		return m.Type
	}
	return PacketType_ALL
}

func (m *TaskRequest) GetProfile() ProfileType {
	if m != nil {
		return m.Profile
	}
	return ProfileType_DXS
}

func (m *TaskRequest) GetProto() Protocol {
	if m != nil {
		return m.Proto
	}
	return Protocol_NONE
}

func (m *TaskRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *TaskRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TaskRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *TaskRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TaskRequest) GetEnable() string {
	if m != nil {
		return m.Enable
	}
	return ""
}

func (m *TaskRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskRequest)(nil), "dproto.TaskRequest")
}
func (m *TaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.RequestID)))
		i += copy(dAtA[i:], m.RequestID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.Profile != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Profile))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Proto))
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Port))
	}
	if len(m.Login) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Login)))
		i += copy(dAtA[i:], m.Login)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Enable) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Enable)))
		i += copy(dAtA[i:], m.Enable)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.Profile != 0 {
		n += 1 + sovRequest(uint64(m.Profile))
	}
	if m.Proto != 0 {
		n += 1 + sovRequest(uint64(m.Proto))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovRequest(uint64(m.Port))
	}
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Enable)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovRequest(uint64(m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PacketType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			m.Profile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Profile |= (ProfileType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (Protocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dproto/request.proto", fileDescriptor_request_337d7ec96a0ae35e) }

var fileDescriptor_request_337d7ec96a0ae35e = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0x51, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0xe9, 0x9f, 0xa4, 0xcd, 0x2d, 0x48, 0xb8, 0x56, 0xb9, 0x14, 0x09, 0xc1, 0x87,
	0x92, 0x17, 0x23, 0xe8, 0x0e, 0x44, 0x41, 0xc5, 0x87, 0x10, 0xb2, 0x81, 0xb4, 0x1d, 0x25, 0x34,
	0x76, 0x62, 0x66, 0x8a, 0x74, 0x27, 0x2e, 0xc6, 0x05, 0xf8, 0xe8, 0x12, 0x24, 0x6e, 0x44, 0x72,
	0x27, 0xad, 0xbe, 0x9d, 0x73, 0xbe, 0x2f, 0x99, 0x0b, 0x93, 0x65, 0xdd, 0x28, 0xa3, 0xce, 0x1b,
	0xf9, 0xb2, 0x91, 0xda, 0x24, 0xdc, 0xd0, 0xb3, 0xeb, 0x14, 0x7b, 0x6a, 0xb6, 0xb5, 0xd4, 0x96,
	0x9d, 0xbe, 0x0f, 0x60, 0x9c, 0x17, 0x7a, 0x95, 0xd9, 0x2f, 0xf0, 0x04, 0xfc, 0x3e, 0xde, 0x5d,
	0x93, 0x88, 0x44, 0xec, 0x67, 0xbf, 0x03, 0xce, 0xc0, 0xc9, 0xb7, 0xb5, 0xa4, 0x41, 0x24, 0xe2,
	0x83, 0x0b, 0x4c, 0xec, 0x0f, 0x93, 0xb4, 0x58, 0xac, 0xa4, 0xe9, 0x48, 0xc6, 0x1c, 0xcf, 0x60,
	0x98, 0x36, 0xea, 0xb1, 0xac, 0x24, 0xfd, 0x67, 0xf5, 0x70, 0xaf, 0xda, 0x99, 0xdd, 0x9d, 0x83,
	0x33, 0x70, 0xd3, 0x8e, 0x92, 0xc3, 0x72, 0xf0, 0x47, 0x36, 0x6a, 0xa1, 0xaa, 0xcc, 0x62, 0x44,
	0x70, 0x6e, 0x95, 0x36, 0xe4, 0xf2, 0x5d, 0x9c, 0xbb, 0x2d, 0x55, 0x8d, 0x21, 0x2f, 0x12, 0xb1,
	0x9b, 0x71, 0xc6, 0x09, 0xb8, 0x0f, 0xea, 0xa9, 0x5c, 0xd3, 0x90, 0x45, 0x5b, 0x70, 0x0a, 0xa3,
	0xb4, 0xd0, 0xfa, 0x55, 0x35, 0x4b, 0x1a, 0x31, 0xd8, 0x77, 0x3c, 0x06, 0xef, 0x66, 0x5d, 0xcc,
	0x2b, 0x49, 0x3e, 0x93, 0xbe, 0x21, 0xc1, 0x30, 0x2f, 0x9f, 0xa5, 0xda, 0x18, 0x02, 0x7e, 0x60,
	0x57, 0xef, 0x9d, 0xd1, 0x38, 0x38, 0xba, 0x0a, 0x3e, 0xda, 0x50, 0x7c, 0xb6, 0xa1, 0xf8, 0x6a,
	0x43, 0xf1, 0xf6, 0x1d, 0xfe, 0x9b, 0x7b, 0x7c, 0xfa, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0xd2, 0x96, 0x1f, 0x8b, 0x01, 0x00, 0x00,
}
