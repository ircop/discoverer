// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dproto/results.proto

package dproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Platform is GetPlatform result
type Platform struct {
	// @inject_tag: json:"model,omitempty"
	Model string `protobuf:"bytes,1,opt,name=Model,proto3" json:"model,omitempty"`
	// @inject_tag: json:"revision,omitempty"
	Revision string `protobuf:"bytes,2,opt,name=Revision,proto3" json:"revision,omitempty"`
	// @inject_tag: json:"version,omitempty"
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"serial,omitempty"
	Serial string `protobuf:"bytes,4,opt,name=Serial,proto3" json:"serial,omitempty"`
	// @inject_tag: json:"macs"
	Macs                 []string `protobuf:"bytes,5,rep,name=Macs" json:"macs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Platform) Reset()         { *m = Platform{} }
func (m *Platform) String() string { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()    {}
func (*Platform) Descriptor() ([]byte, []int) {
	return fileDescriptor_results_e557e289c01bfacc, []int{0}
}
func (m *Platform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Platform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Platform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Platform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Platform.Merge(dst, src)
}
func (m *Platform) XXX_Size() int {
	return m.Size()
}
func (m *Platform) XXX_DiscardUnknown() {
	xxx_messageInfo_Platform.DiscardUnknown(m)
}

var xxx_messageInfo_Platform proto.InternalMessageInfo

func (m *Platform) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Platform) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Platform) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Platform) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *Platform) GetMacs() []string {
	if m != nil {
		return m.Macs
	}
	return nil
}

// Interface is for GetInterfaces() result
type Interface struct {
	// @inject_tag: json:"type,omitempty"
	Type InterfaceType `protobuf:"varint,1,opt,name=Type,proto3,enum=dproto.InterfaceType" json:"type,omitempty"`
	// @inject_tag: json:"name,omitempty"
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"shortname,omitempty"
	Shortname string `protobuf:"bytes,3,opt,name=Shortname,proto3" json:"shortname,omitempty"`
	// @inject_tag: json:"description,omitempty"
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"description,omitempty"`
	// @inject_tag: json:"lldp_id,omitempty"
	LldpID string `protobuf:"bytes,5,opt,name=LldpID,proto3" json:"lldp_id,omitempty"`
	// @inject_tag: json:"po_members,omitempty"
	PoMembers            []string `protobuf:"bytes,6,rep,name=PoMembers" json:"po_members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_results_e557e289c01bfacc, []int{1}
}
func (m *Interface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(dst, src)
}
func (m *Interface) XXX_Size() int {
	return m.Size()
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetType() InterfaceType {
	if m != nil {
		return m.Type
	}
	return InterfaceType_UNKNOWN
}

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetLldpID() string {
	if m != nil {
		return m.LldpID
	}
	return ""
}

func (m *Interface) GetPoMembers() []string {
	if m != nil {
		return m.PoMembers
	}
	return nil
}

// LldpNeighbor for GetLldp()
type LldpNeighbor struct {
	// @inject_tag: json:"local_port,omitempty"
	LocalPort string `protobuf:"bytes,1,opt,name=LocalPort,proto3" json:"local_port,omitempty"`
	// @inject_tag: json:"chassis_id,omitempty"
	ChassisID string `protobuf:"bytes,2,opt,name=ChassisID,proto3" json:"chassis_id,omitempty"`
	// @inject_tag: json:"port_id,omitempty"
	PortID               string   `protobuf:"bytes,3,opt,name=PortID,proto3" json:"port_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LldpNeighbor) Reset()         { *m = LldpNeighbor{} }
func (m *LldpNeighbor) String() string { return proto.CompactTextString(m) }
func (*LldpNeighbor) ProtoMessage()    {}
func (*LldpNeighbor) Descriptor() ([]byte, []int) {
	return fileDescriptor_results_e557e289c01bfacc, []int{2}
}
func (m *LldpNeighbor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LldpNeighbor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LldpNeighbor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LldpNeighbor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LldpNeighbor.Merge(dst, src)
}
func (m *LldpNeighbor) XXX_Size() int {
	return m.Size()
}
func (m *LldpNeighbor) XXX_DiscardUnknown() {
	xxx_messageInfo_LldpNeighbor.DiscardUnknown(m)
}

var xxx_messageInfo_LldpNeighbor proto.InternalMessageInfo

func (m *LldpNeighbor) GetLocalPort() string {
	if m != nil {
		return m.LocalPort
	}
	return ""
}

func (m *LldpNeighbor) GetChassisID() string {
	if m != nil {
		return m.ChassisID
	}
	return ""
}

func (m *LldpNeighbor) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

// Vlan for GetVlans()
type Vlan struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                   int64    `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	TrunkPorts           []string `protobuf:"bytes,3,rep,name=TrunkPorts" json:"TrunkPorts,omitempty"`
	AccessPorts          []string `protobuf:"bytes,4,rep,name=AccessPorts" json:"AccessPorts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlan) Reset()         { *m = Vlan{} }
func (m *Vlan) String() string { return proto.CompactTextString(m) }
func (*Vlan) ProtoMessage()    {}
func (*Vlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_results_e557e289c01bfacc, []int{3}
}
func (m *Vlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Vlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlan.Merge(dst, src)
}
func (m *Vlan) XXX_Size() int {
	return m.Size()
}
func (m *Vlan) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlan.DiscardUnknown(m)
}

var xxx_messageInfo_Vlan proto.InternalMessageInfo

func (m *Vlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vlan) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Vlan) GetTrunkPorts() []string {
	if m != nil {
		return m.TrunkPorts
	}
	return nil
}

func (m *Vlan) GetAccessPorts() []string {
	if m != nil {
		return m.AccessPorts
	}
	return nil
}

// Ipif is ip interface for GetIps()
type Ipif struct {
	Interface            string   `protobuf:"bytes,1,opt,name=Interface,proto3" json:"Interface,omitempty"`
	IP                   string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Mask                 string   `protobuf:"bytes,3,opt,name=Mask,proto3" json:"Mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipif) Reset()         { *m = Ipif{} }
func (m *Ipif) String() string { return proto.CompactTextString(m) }
func (*Ipif) ProtoMessage()    {}
func (*Ipif) Descriptor() ([]byte, []int) {
	return fileDescriptor_results_e557e289c01bfacc, []int{4}
}
func (m *Ipif) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ipif) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ipif.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ipif) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipif.Merge(dst, src)
}
func (m *Ipif) XXX_Size() int {
	return m.Size()
}
func (m *Ipif) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipif.DiscardUnknown(m)
}

var xxx_messageInfo_Ipif proto.InternalMessageInfo

func (m *Ipif) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *Ipif) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Ipif) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

func init() {
	proto.RegisterType((*Platform)(nil), "dproto.Platform")
	proto.RegisterType((*Interface)(nil), "dproto.Interface")
	proto.RegisterType((*LldpNeighbor)(nil), "dproto.LldpNeighbor")
	proto.RegisterType((*Vlan)(nil), "dproto.Vlan")
	proto.RegisterType((*Ipif)(nil), "dproto.Ipif")
}
func (m *Platform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Platform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Serial) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Serial)))
		i += copy(dAtA[i:], m.Serial)
	}
	if len(m.Macs) > 0 {
		for _, s := range m.Macs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintResults(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Shortname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Shortname)))
		i += copy(dAtA[i:], m.Shortname)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.LldpID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.LldpID)))
		i += copy(dAtA[i:], m.LldpID)
	}
	if len(m.PoMembers) > 0 {
		for _, s := range m.PoMembers {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LldpNeighbor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LldpNeighbor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalPort) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.LocalPort)))
		i += copy(dAtA[i:], m.LocalPort)
	}
	if len(m.ChassisID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.ChassisID)))
		i += copy(dAtA[i:], m.ChassisID)
	}
	if len(m.PortID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.PortID)))
		i += copy(dAtA[i:], m.PortID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Vlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vlan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintResults(dAtA, i, uint64(m.ID))
	}
	if len(m.TrunkPorts) > 0 {
		for _, s := range m.TrunkPorts {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AccessPorts) > 0 {
		for _, s := range m.AccessPorts {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ipif) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipif) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interface) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Interface)))
		i += copy(dAtA[i:], m.Interface)
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if len(m.Mask) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintResults(dAtA, i, uint64(len(m.Mask)))
		i += copy(dAtA[i:], m.Mask)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintResults(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Platform) Size() (n int) {
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	if len(m.Macs) > 0 {
		for _, s := range m.Macs {
			l = len(s)
			n += 1 + l + sovResults(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Interface) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovResults(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.LldpID)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	if len(m.PoMembers) > 0 {
		for _, s := range m.PoMembers {
			l = len(s)
			n += 1 + l + sovResults(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LldpNeighbor) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalPort)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.ChassisID)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vlan) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovResults(uint64(m.ID))
	}
	if len(m.TrunkPorts) > 0 {
		for _, s := range m.TrunkPorts {
			l = len(s)
			n += 1 + l + sovResults(uint64(l))
		}
	}
	if len(m.AccessPorts) > 0 {
		for _, s := range m.AccessPorts {
			l = len(s)
			n += 1 + l + sovResults(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ipif) Size() (n int) {
	var l int
	_ = l
	l = len(m.Interface)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	l = len(m.Mask)
	if l > 0 {
		n += 1 + l + sovResults(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResults(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozResults(x uint64) (n int) {
	return sovResults(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Platform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Platform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Platform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Macs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Macs = append(m.Macs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (InterfaceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LldpID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LldpID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoMembers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoMembers = append(m.PoMembers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LldpNeighbor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LldpNeighbor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LldpNeighbor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChassisID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChassisID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrunkPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrunkPorts = append(m.TrunkPorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessPorts = append(m.AccessPorts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ipif) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ipif: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ipif: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResults
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResults(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResults
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthResults
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResults
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResults(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResults = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResults   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dproto/results.proto", fileDescriptor_results_e557e289c01bfacc) }

var fileDescriptor_results_e557e289c01bfacc = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4d, 0x8e, 0xd3, 0x30,
	0x14, 0xc7, 0x71, 0x92, 0x86, 0xe6, 0x0d, 0x1a, 0x8d, 0xac, 0x01, 0x59, 0x23, 0x14, 0x55, 0x59,
	0x0d, 0x9b, 0x22, 0xc1, 0x09, 0x80, 0x2c, 0x08, 0x9a, 0x8e, 0xa2, 0xcc, 0x68, 0xf6, 0x4e, 0xea,
	0xd2, 0xa8, 0x6e, 0x1c, 0xd9, 0x2e, 0x52, 0x6f, 0xc0, 0x11, 0x38, 0x0e, 0x4b, 0x96, 0x1c, 0x01,
	0x95, 0x8b, 0x8c, 0xfc, 0xd1, 0x24, 0x3b, 0xff, 0x3f, 0xe2, 0xfc, 0x9e, 0x1f, 0x5c, 0xaf, 0x7b,
	0x29, 0xb4, 0x78, 0x2f, 0x99, 0x3a, 0x70, 0xad, 0x96, 0x56, 0xe1, 0xd8, 0xb9, 0x37, 0xd8, 0xa7,
	0xfa, 0xd8, 0x33, 0x9f, 0x65, 0x3f, 0x11, 0xcc, 0x4b, 0x4e, 0xf5, 0x46, 0xc8, 0x3d, 0xbe, 0x86,
	0xd9, 0x4a, 0xac, 0x19, 0x27, 0x68, 0x81, 0x6e, 0x93, 0xca, 0x09, 0x7c, 0x03, 0xf3, 0x8a, 0xfd,
	0x68, 0x55, 0x2b, 0x3a, 0x12, 0xd8, 0x60, 0xd0, 0x98, 0xc0, 0xcb, 0x27, 0x26, 0x6d, 0x14, 0xda,
	0xe8, 0x2c, 0xf1, 0x1b, 0x88, 0x1f, 0x98, 0x6c, 0x29, 0x27, 0x91, 0x0d, 0xbc, 0xc2, 0x18, 0xa2,
	0x15, 0x6d, 0x14, 0x99, 0x2d, 0xc2, 0xdb, 0xa4, 0xb2, 0xe7, 0x6f, 0xd1, 0x3c, 0xbe, 0xba, 0xc8,
	0x7e, 0x23, 0x48, 0x8a, 0x4e, 0x33, 0xb9, 0xa1, 0x0d, 0xc3, 0xef, 0x20, 0x7a, 0x3c, 0xf6, 0xcc,
	0xa2, 0x5c, 0x7e, 0x78, 0xbd, 0x74, 0xec, 0xcb, 0xa1, 0x60, 0xc2, 0xca, 0x56, 0xcc, 0x95, 0xf7,
	0x74, 0xcf, 0x3c, 0x9c, 0x3d, 0xe3, 0xb7, 0x90, 0x3c, 0x6c, 0x85, 0xd4, 0x9d, 0x09, 0x1c, 0xda,
	0x68, 0xe0, 0x05, 0x5c, 0xe4, 0x4c, 0x35, 0xb2, 0xed, 0xb5, 0x41, 0x77, 0x84, 0x53, 0xcb, 0xe0,
	0xdf, 0xf1, 0x75, 0x5f, 0xe4, 0x64, 0xe6, 0xf0, 0x9d, 0x32, 0xf7, 0x96, 0x62, 0xc5, 0xf6, 0x35,
	0x93, 0x8a, 0xc4, 0x76, 0x86, 0xd1, 0xc8, 0x6a, 0x78, 0x65, 0x7a, 0xf7, 0xac, 0xfd, 0xbe, 0xad,
	0x85, 0x34, 0xed, 0x3b, 0xd1, 0x50, 0x5e, 0x0a, 0xa9, 0xfd, 0xa3, 0x8e, 0x86, 0x49, 0xbf, 0x6c,
	0xa9, 0x52, 0xad, 0x2a, 0x72, 0x0f, 0x3f, 0x1a, 0x86, 0xc0, 0xb4, 0x8a, 0xdc, 0xe3, 0x7b, 0x95,
	0x71, 0x88, 0x9e, 0x38, 0xed, 0x86, 0xa9, 0xd1, 0x64, 0xea, 0x4b, 0x08, 0xfc, 0x55, 0x61, 0x15,
	0x14, 0x39, 0x4e, 0x01, 0x1e, 0xe5, 0xa1, 0xdb, 0x99, 0x4f, 0x15, 0x09, 0x2d, 0xee, 0xc4, 0x31,
	0xef, 0xf0, 0xa9, 0x69, 0x98, 0x52, 0xae, 0x10, 0xd9, 0xc2, 0xd4, 0xca, 0xbe, 0x42, 0x54, 0xf4,
	0xed, 0xc6, 0xb0, 0x0e, 0x4f, 0x7f, 0x9e, 0x64, 0x5c, 0x96, 0xf9, 0x6f, 0xe9, 0x47, 0x08, 0x8a,
	0xd2, 0x2d, 0x59, 0xed, 0x3c, 0xb9, 0x3d, 0x7f, 0xbe, 0xfa, 0x73, 0x4a, 0xd1, 0xdf, 0x53, 0x8a,
	0xfe, 0x9d, 0x52, 0xf4, 0xeb, 0x7f, 0xfa, 0xa2, 0x8e, 0xed, 0x4a, 0x3f, 0x3e, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x17, 0x4e, 0xfc, 0x42, 0xb6, 0x02, 0x00, 0x00,
}
